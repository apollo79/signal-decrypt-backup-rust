// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by protoc 3.12.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `Backups.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:signal.SqlStatement)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct SqlStatement {
    // message fields
    // @@protoc_insertion_point(field:signal.SqlStatement.statement)
    pub statement: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:signal.SqlStatement.parameters)
    pub parameters: ::std::vec::Vec<sql_statement::SqlParameter>,
    // special fields
    // @@protoc_insertion_point(special_field:signal.SqlStatement.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SqlStatement {
    fn default() -> &'a SqlStatement {
        <SqlStatement as ::protobuf::Message>::default_instance()
    }
}

impl SqlStatement {
    pub fn new() -> SqlStatement {
        ::std::default::Default::default()
    }

    // optional string statement = 1;

    pub fn statement(&self) -> &str {
        match self.statement.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_statement(&mut self) {
        self.statement = ::std::option::Option::None;
    }

    pub fn has_statement(&self) -> bool {
        self.statement.is_some()
    }

    // Param is passed by value, moved
    pub fn set_statement(&mut self, v: ::std::string::String) {
        self.statement = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_statement(&mut self) -> &mut ::std::string::String {
        if self.statement.is_none() {
            self.statement = ::std::option::Option::Some(::std::string::String::new());
        }
        self.statement.as_mut().unwrap()
    }

    // Take field
    pub fn take_statement(&mut self) -> ::std::string::String {
        self.statement.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "statement",
            |m: &SqlStatement| { &m.statement },
            |m: &mut SqlStatement| { &mut m.statement },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "parameters",
            |m: &SqlStatement| { &m.parameters },
            |m: &mut SqlStatement| { &mut m.parameters },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SqlStatement>(
            "SqlStatement",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SqlStatement {
    const NAME: &'static str = "SqlStatement";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.statement = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.parameters.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.statement.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        for value in &self.parameters {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.statement.as_ref() {
            os.write_string(1, v)?;
        }
        for v in &self.parameters {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SqlStatement {
        SqlStatement::new()
    }

    fn clear(&mut self) {
        self.statement = ::std::option::Option::None;
        self.parameters.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SqlStatement {
        static instance: SqlStatement = SqlStatement {
            statement: ::std::option::Option::None,
            parameters: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SqlStatement {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SqlStatement").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SqlStatement {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SqlStatement {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `SqlStatement`
pub mod sql_statement {
    // @@protoc_insertion_point(message:signal.SqlStatement.SqlParameter)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct SqlParameter {
        // message fields
        // @@protoc_insertion_point(field:signal.SqlStatement.SqlParameter.stringParamter)
        pub stringParamter: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:signal.SqlStatement.SqlParameter.integerParameter)
        pub integerParameter: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:signal.SqlStatement.SqlParameter.doubleParameter)
        pub doubleParameter: ::std::option::Option<f64>,
        // @@protoc_insertion_point(field:signal.SqlStatement.SqlParameter.blobParameter)
        pub blobParameter: ::std::option::Option<::std::vec::Vec<u8>>,
        // @@protoc_insertion_point(field:signal.SqlStatement.SqlParameter.nullparameter)
        pub nullparameter: ::std::option::Option<bool>,
        // special fields
        // @@protoc_insertion_point(special_field:signal.SqlStatement.SqlParameter.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a SqlParameter {
        fn default() -> &'a SqlParameter {
            <SqlParameter as ::protobuf::Message>::default_instance()
        }
    }

    impl SqlParameter {
        pub fn new() -> SqlParameter {
            ::std::default::Default::default()
        }

        // optional string stringParamter = 1;

        pub fn stringParamter(&self) -> &str {
            match self.stringParamter.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_stringParamter(&mut self) {
            self.stringParamter = ::std::option::Option::None;
        }

        pub fn has_stringParamter(&self) -> bool {
            self.stringParamter.is_some()
        }

        // Param is passed by value, moved
        pub fn set_stringParamter(&mut self, v: ::std::string::String) {
            self.stringParamter = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_stringParamter(&mut self) -> &mut ::std::string::String {
            if self.stringParamter.is_none() {
                self.stringParamter = ::std::option::Option::Some(::std::string::String::new());
            }
            self.stringParamter.as_mut().unwrap()
        }

        // Take field
        pub fn take_stringParamter(&mut self) -> ::std::string::String {
            self.stringParamter.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional uint64 integerParameter = 2;

        pub fn integerParameter(&self) -> u64 {
            self.integerParameter.unwrap_or(0)
        }

        pub fn clear_integerParameter(&mut self) {
            self.integerParameter = ::std::option::Option::None;
        }

        pub fn has_integerParameter(&self) -> bool {
            self.integerParameter.is_some()
        }

        // Param is passed by value, moved
        pub fn set_integerParameter(&mut self, v: u64) {
            self.integerParameter = ::std::option::Option::Some(v);
        }

        // optional double doubleParameter = 3;

        pub fn doubleParameter(&self) -> f64 {
            self.doubleParameter.unwrap_or(0.)
        }

        pub fn clear_doubleParameter(&mut self) {
            self.doubleParameter = ::std::option::Option::None;
        }

        pub fn has_doubleParameter(&self) -> bool {
            self.doubleParameter.is_some()
        }

        // Param is passed by value, moved
        pub fn set_doubleParameter(&mut self, v: f64) {
            self.doubleParameter = ::std::option::Option::Some(v);
        }

        // optional bytes blobParameter = 4;

        pub fn blobParameter(&self) -> &[u8] {
            match self.blobParameter.as_ref() {
                Some(v) => v,
                None => &[],
            }
        }

        pub fn clear_blobParameter(&mut self) {
            self.blobParameter = ::std::option::Option::None;
        }

        pub fn has_blobParameter(&self) -> bool {
            self.blobParameter.is_some()
        }

        // Param is passed by value, moved
        pub fn set_blobParameter(&mut self, v: ::std::vec::Vec<u8>) {
            self.blobParameter = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_blobParameter(&mut self) -> &mut ::std::vec::Vec<u8> {
            if self.blobParameter.is_none() {
                self.blobParameter = ::std::option::Option::Some(::std::vec::Vec::new());
            }
            self.blobParameter.as_mut().unwrap()
        }

        // Take field
        pub fn take_blobParameter(&mut self) -> ::std::vec::Vec<u8> {
            self.blobParameter.take().unwrap_or_else(|| ::std::vec::Vec::new())
        }

        // optional bool nullparameter = 5;

        pub fn nullparameter(&self) -> bool {
            self.nullparameter.unwrap_or(false)
        }

        pub fn clear_nullparameter(&mut self) {
            self.nullparameter = ::std::option::Option::None;
        }

        pub fn has_nullparameter(&self) -> bool {
            self.nullparameter.is_some()
        }

        // Param is passed by value, moved
        pub fn set_nullparameter(&mut self, v: bool) {
            self.nullparameter = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(5);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "stringParamter",
                |m: &SqlParameter| { &m.stringParamter },
                |m: &mut SqlParameter| { &mut m.stringParamter },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "integerParameter",
                |m: &SqlParameter| { &m.integerParameter },
                |m: &mut SqlParameter| { &mut m.integerParameter },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "doubleParameter",
                |m: &SqlParameter| { &m.doubleParameter },
                |m: &mut SqlParameter| { &mut m.doubleParameter },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "blobParameter",
                |m: &SqlParameter| { &m.blobParameter },
                |m: &mut SqlParameter| { &mut m.blobParameter },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "nullparameter",
                |m: &SqlParameter| { &m.nullparameter },
                |m: &mut SqlParameter| { &mut m.nullparameter },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SqlParameter>(
                "SqlStatement.SqlParameter",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for SqlParameter {
        const NAME: &'static str = "SqlParameter";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.stringParamter = ::std::option::Option::Some(is.read_string()?);
                    },
                    16 => {
                        self.integerParameter = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    25 => {
                        self.doubleParameter = ::std::option::Option::Some(is.read_double()?);
                    },
                    34 => {
                        self.blobParameter = ::std::option::Option::Some(is.read_bytes()?);
                    },
                    40 => {
                        self.nullparameter = ::std::option::Option::Some(is.read_bool()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.stringParamter.as_ref() {
                my_size += ::protobuf::rt::string_size(1, &v);
            }
            if let Some(v) = self.integerParameter {
                my_size += ::protobuf::rt::uint64_size(2, v);
            }
            if let Some(v) = self.doubleParameter {
                my_size += 1 + 8;
            }
            if let Some(v) = self.blobParameter.as_ref() {
                my_size += ::protobuf::rt::bytes_size(4, &v);
            }
            if let Some(v) = self.nullparameter {
                my_size += 1 + 1;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.stringParamter.as_ref() {
                os.write_string(1, v)?;
            }
            if let Some(v) = self.integerParameter {
                os.write_uint64(2, v)?;
            }
            if let Some(v) = self.doubleParameter {
                os.write_double(3, v)?;
            }
            if let Some(v) = self.blobParameter.as_ref() {
                os.write_bytes(4, v)?;
            }
            if let Some(v) = self.nullparameter {
                os.write_bool(5, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> SqlParameter {
            SqlParameter::new()
        }

        fn clear(&mut self) {
            self.stringParamter = ::std::option::Option::None;
            self.integerParameter = ::std::option::Option::None;
            self.doubleParameter = ::std::option::Option::None;
            self.blobParameter = ::std::option::Option::None;
            self.nullparameter = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static SqlParameter {
            static instance: SqlParameter = SqlParameter {
                stringParamter: ::std::option::Option::None,
                integerParameter: ::std::option::Option::None,
                doubleParameter: ::std::option::Option::None,
                blobParameter: ::std::option::Option::None,
                nullparameter: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for SqlParameter {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("SqlStatement.SqlParameter").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for SqlParameter {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for SqlParameter {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:signal.SharedPreference)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct SharedPreference {
    // message fields
    // @@protoc_insertion_point(field:signal.SharedPreference.file)
    pub file: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:signal.SharedPreference.key)
    pub key: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:signal.SharedPreference.value)
    pub value: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:signal.SharedPreference.booleanValue)
    pub booleanValue: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:signal.SharedPreference.stringSetValue)
    pub stringSetValue: ::std::vec::Vec<::std::string::String>,
    // @@protoc_insertion_point(field:signal.SharedPreference.isStringSetValue)
    pub isStringSetValue: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:signal.SharedPreference.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SharedPreference {
    fn default() -> &'a SharedPreference {
        <SharedPreference as ::protobuf::Message>::default_instance()
    }
}

impl SharedPreference {
    pub fn new() -> SharedPreference {
        ::std::default::Default::default()
    }

    // optional string file = 1;

    pub fn file(&self) -> &str {
        match self.file.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_file(&mut self) {
        self.file = ::std::option::Option::None;
    }

    pub fn has_file(&self) -> bool {
        self.file.is_some()
    }

    // Param is passed by value, moved
    pub fn set_file(&mut self, v: ::std::string::String) {
        self.file = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_file(&mut self) -> &mut ::std::string::String {
        if self.file.is_none() {
            self.file = ::std::option::Option::Some(::std::string::String::new());
        }
        self.file.as_mut().unwrap()
    }

    // Take field
    pub fn take_file(&mut self) -> ::std::string::String {
        self.file.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string key = 2;

    pub fn key(&self) -> &str {
        match self.key.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_key(&mut self) {
        self.key = ::std::option::Option::None;
    }

    pub fn has_key(&self) -> bool {
        self.key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::string::String) {
        self.key = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ::std::string::String {
        if self.key.is_none() {
            self.key = ::std::option::Option::Some(::std::string::String::new());
        }
        self.key.as_mut().unwrap()
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::string::String {
        self.key.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string value = 3;

    pub fn value(&self) -> &str {
        match self.value.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_value(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_value(&self) -> bool {
        self.value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::string::String) {
        self.value = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::string::String {
        if self.value.is_none() {
            self.value = ::std::option::Option::Some(::std::string::String::new());
        }
        self.value.as_mut().unwrap()
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::string::String {
        self.value.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bool booleanValue = 4;

    pub fn booleanValue(&self) -> bool {
        self.booleanValue.unwrap_or(false)
    }

    pub fn clear_booleanValue(&mut self) {
        self.booleanValue = ::std::option::Option::None;
    }

    pub fn has_booleanValue(&self) -> bool {
        self.booleanValue.is_some()
    }

    // Param is passed by value, moved
    pub fn set_booleanValue(&mut self, v: bool) {
        self.booleanValue = ::std::option::Option::Some(v);
    }

    // optional bool isStringSetValue = 6;

    pub fn isStringSetValue(&self) -> bool {
        self.isStringSetValue.unwrap_or(false)
    }

    pub fn clear_isStringSetValue(&mut self) {
        self.isStringSetValue = ::std::option::Option::None;
    }

    pub fn has_isStringSetValue(&self) -> bool {
        self.isStringSetValue.is_some()
    }

    // Param is passed by value, moved
    pub fn set_isStringSetValue(&mut self, v: bool) {
        self.isStringSetValue = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "file",
            |m: &SharedPreference| { &m.file },
            |m: &mut SharedPreference| { &mut m.file },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "key",
            |m: &SharedPreference| { &m.key },
            |m: &mut SharedPreference| { &mut m.key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "value",
            |m: &SharedPreference| { &m.value },
            |m: &mut SharedPreference| { &mut m.value },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "booleanValue",
            |m: &SharedPreference| { &m.booleanValue },
            |m: &mut SharedPreference| { &mut m.booleanValue },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "stringSetValue",
            |m: &SharedPreference| { &m.stringSetValue },
            |m: &mut SharedPreference| { &mut m.stringSetValue },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "isStringSetValue",
            |m: &SharedPreference| { &m.isStringSetValue },
            |m: &mut SharedPreference| { &mut m.isStringSetValue },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SharedPreference>(
            "SharedPreference",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SharedPreference {
    const NAME: &'static str = "SharedPreference";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.file = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.key = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    self.value = ::std::option::Option::Some(is.read_string()?);
                },
                32 => {
                    self.booleanValue = ::std::option::Option::Some(is.read_bool()?);
                },
                42 => {
                    self.stringSetValue.push(is.read_string()?);
                },
                48 => {
                    self.isStringSetValue = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.file.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.key.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.value.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.booleanValue {
            my_size += 1 + 1;
        }
        for value in &self.stringSetValue {
            my_size += ::protobuf::rt::string_size(5, &value);
        };
        if let Some(v) = self.isStringSetValue {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.file.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.key.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.value.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.booleanValue {
            os.write_bool(4, v)?;
        }
        for v in &self.stringSetValue {
            os.write_string(5, &v)?;
        };
        if let Some(v) = self.isStringSetValue {
            os.write_bool(6, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SharedPreference {
        SharedPreference::new()
    }

    fn clear(&mut self) {
        self.file = ::std::option::Option::None;
        self.key = ::std::option::Option::None;
        self.value = ::std::option::Option::None;
        self.booleanValue = ::std::option::Option::None;
        self.stringSetValue.clear();
        self.isStringSetValue = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SharedPreference {
        static instance: SharedPreference = SharedPreference {
            file: ::std::option::Option::None,
            key: ::std::option::Option::None,
            value: ::std::option::Option::None,
            booleanValue: ::std::option::Option::None,
            stringSetValue: ::std::vec::Vec::new(),
            isStringSetValue: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SharedPreference {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SharedPreference").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SharedPreference {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SharedPreference {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:signal.Attachment)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Attachment {
    // message fields
    // @@protoc_insertion_point(field:signal.Attachment.rowId)
    pub rowId: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:signal.Attachment.attachmentId)
    pub attachmentId: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:signal.Attachment.length)
    pub length: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:signal.Attachment.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Attachment {
    fn default() -> &'a Attachment {
        <Attachment as ::protobuf::Message>::default_instance()
    }
}

impl Attachment {
    pub fn new() -> Attachment {
        ::std::default::Default::default()
    }

    // optional uint64 rowId = 1;

    pub fn rowId(&self) -> u64 {
        self.rowId.unwrap_or(0)
    }

    pub fn clear_rowId(&mut self) {
        self.rowId = ::std::option::Option::None;
    }

    pub fn has_rowId(&self) -> bool {
        self.rowId.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rowId(&mut self, v: u64) {
        self.rowId = ::std::option::Option::Some(v);
    }

    // optional uint64 attachmentId = 2;

    pub fn attachmentId(&self) -> u64 {
        self.attachmentId.unwrap_or(0)
    }

    pub fn clear_attachmentId(&mut self) {
        self.attachmentId = ::std::option::Option::None;
    }

    pub fn has_attachmentId(&self) -> bool {
        self.attachmentId.is_some()
    }

    // Param is passed by value, moved
    pub fn set_attachmentId(&mut self, v: u64) {
        self.attachmentId = ::std::option::Option::Some(v);
    }

    // optional uint32 length = 3;

    pub fn length(&self) -> u32 {
        self.length.unwrap_or(0)
    }

    pub fn clear_length(&mut self) {
        self.length = ::std::option::Option::None;
    }

    pub fn has_length(&self) -> bool {
        self.length.is_some()
    }

    // Param is passed by value, moved
    pub fn set_length(&mut self, v: u32) {
        self.length = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "rowId",
            |m: &Attachment| { &m.rowId },
            |m: &mut Attachment| { &mut m.rowId },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "attachmentId",
            |m: &Attachment| { &m.attachmentId },
            |m: &mut Attachment| { &mut m.attachmentId },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "length",
            |m: &Attachment| { &m.length },
            |m: &mut Attachment| { &mut m.length },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Attachment>(
            "Attachment",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Attachment {
    const NAME: &'static str = "Attachment";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.rowId = ::std::option::Option::Some(is.read_uint64()?);
                },
                16 => {
                    self.attachmentId = ::std::option::Option::Some(is.read_uint64()?);
                },
                24 => {
                    self.length = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.rowId {
            my_size += ::protobuf::rt::uint64_size(1, v);
        }
        if let Some(v) = self.attachmentId {
            my_size += ::protobuf::rt::uint64_size(2, v);
        }
        if let Some(v) = self.length {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.rowId {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.attachmentId {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.length {
            os.write_uint32(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Attachment {
        Attachment::new()
    }

    fn clear(&mut self) {
        self.rowId = ::std::option::Option::None;
        self.attachmentId = ::std::option::Option::None;
        self.length = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Attachment {
        static instance: Attachment = Attachment {
            rowId: ::std::option::Option::None,
            attachmentId: ::std::option::Option::None,
            length: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Attachment {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Attachment").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Attachment {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Attachment {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:signal.Sticker)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Sticker {
    // message fields
    // @@protoc_insertion_point(field:signal.Sticker.rowId)
    pub rowId: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:signal.Sticker.length)
    pub length: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:signal.Sticker.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Sticker {
    fn default() -> &'a Sticker {
        <Sticker as ::protobuf::Message>::default_instance()
    }
}

impl Sticker {
    pub fn new() -> Sticker {
        ::std::default::Default::default()
    }

    // optional uint64 rowId = 1;

    pub fn rowId(&self) -> u64 {
        self.rowId.unwrap_or(0)
    }

    pub fn clear_rowId(&mut self) {
        self.rowId = ::std::option::Option::None;
    }

    pub fn has_rowId(&self) -> bool {
        self.rowId.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rowId(&mut self, v: u64) {
        self.rowId = ::std::option::Option::Some(v);
    }

    // optional uint32 length = 2;

    pub fn length(&self) -> u32 {
        self.length.unwrap_or(0)
    }

    pub fn clear_length(&mut self) {
        self.length = ::std::option::Option::None;
    }

    pub fn has_length(&self) -> bool {
        self.length.is_some()
    }

    // Param is passed by value, moved
    pub fn set_length(&mut self, v: u32) {
        self.length = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "rowId",
            |m: &Sticker| { &m.rowId },
            |m: &mut Sticker| { &mut m.rowId },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "length",
            |m: &Sticker| { &m.length },
            |m: &mut Sticker| { &mut m.length },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Sticker>(
            "Sticker",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Sticker {
    const NAME: &'static str = "Sticker";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.rowId = ::std::option::Option::Some(is.read_uint64()?);
                },
                16 => {
                    self.length = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.rowId {
            my_size += ::protobuf::rt::uint64_size(1, v);
        }
        if let Some(v) = self.length {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.rowId {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.length {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Sticker {
        Sticker::new()
    }

    fn clear(&mut self) {
        self.rowId = ::std::option::Option::None;
        self.length = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Sticker {
        static instance: Sticker = Sticker {
            rowId: ::std::option::Option::None,
            length: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Sticker {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Sticker").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Sticker {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Sticker {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:signal.Avatar)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Avatar {
    // message fields
    // @@protoc_insertion_point(field:signal.Avatar.name)
    pub name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:signal.Avatar.recipientId)
    pub recipientId: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:signal.Avatar.length)
    pub length: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:signal.Avatar.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Avatar {
    fn default() -> &'a Avatar {
        <Avatar as ::protobuf::Message>::default_instance()
    }
}

impl Avatar {
    pub fn new() -> Avatar {
        ::std::default::Default::default()
    }

    // optional string name = 1;

    pub fn name(&self) -> &str {
        match self.name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_name(&mut self) {
        self.name = ::std::option::Option::None;
    }

    pub fn has_name(&self) -> bool {
        self.name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        if self.name.is_none() {
            self.name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.name.as_mut().unwrap()
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        self.name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string recipientId = 3;

    pub fn recipientId(&self) -> &str {
        match self.recipientId.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_recipientId(&mut self) {
        self.recipientId = ::std::option::Option::None;
    }

    pub fn has_recipientId(&self) -> bool {
        self.recipientId.is_some()
    }

    // Param is passed by value, moved
    pub fn set_recipientId(&mut self, v: ::std::string::String) {
        self.recipientId = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_recipientId(&mut self) -> &mut ::std::string::String {
        if self.recipientId.is_none() {
            self.recipientId = ::std::option::Option::Some(::std::string::String::new());
        }
        self.recipientId.as_mut().unwrap()
    }

    // Take field
    pub fn take_recipientId(&mut self) -> ::std::string::String {
        self.recipientId.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 length = 2;

    pub fn length(&self) -> u32 {
        self.length.unwrap_or(0)
    }

    pub fn clear_length(&mut self) {
        self.length = ::std::option::Option::None;
    }

    pub fn has_length(&self) -> bool {
        self.length.is_some()
    }

    // Param is passed by value, moved
    pub fn set_length(&mut self, v: u32) {
        self.length = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "name",
            |m: &Avatar| { &m.name },
            |m: &mut Avatar| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "recipientId",
            |m: &Avatar| { &m.recipientId },
            |m: &mut Avatar| { &mut m.recipientId },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "length",
            |m: &Avatar| { &m.length },
            |m: &mut Avatar| { &mut m.length },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Avatar>(
            "Avatar",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Avatar {
    const NAME: &'static str = "Avatar";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.name = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    self.recipientId = ::std::option::Option::Some(is.read_string()?);
                },
                16 => {
                    self.length = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.name.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.recipientId.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.length {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.name.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.recipientId.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.length {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Avatar {
        Avatar::new()
    }

    fn clear(&mut self) {
        self.name = ::std::option::Option::None;
        self.recipientId = ::std::option::Option::None;
        self.length = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Avatar {
        static instance: Avatar = Avatar {
            name: ::std::option::Option::None,
            recipientId: ::std::option::Option::None,
            length: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Avatar {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Avatar").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Avatar {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Avatar {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:signal.DatabaseVersion)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct DatabaseVersion {
    // message fields
    // @@protoc_insertion_point(field:signal.DatabaseVersion.version)
    pub version: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:signal.DatabaseVersion.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DatabaseVersion {
    fn default() -> &'a DatabaseVersion {
        <DatabaseVersion as ::protobuf::Message>::default_instance()
    }
}

impl DatabaseVersion {
    pub fn new() -> DatabaseVersion {
        ::std::default::Default::default()
    }

    // optional uint32 version = 1;

    pub fn version(&self) -> u32 {
        self.version.unwrap_or(0)
    }

    pub fn clear_version(&mut self) {
        self.version = ::std::option::Option::None;
    }

    pub fn has_version(&self) -> bool {
        self.version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: u32) {
        self.version = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "version",
            |m: &DatabaseVersion| { &m.version },
            |m: &mut DatabaseVersion| { &mut m.version },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DatabaseVersion>(
            "DatabaseVersion",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DatabaseVersion {
    const NAME: &'static str = "DatabaseVersion";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.version = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.version {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.version {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DatabaseVersion {
        DatabaseVersion::new()
    }

    fn clear(&mut self) {
        self.version = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DatabaseVersion {
        static instance: DatabaseVersion = DatabaseVersion {
            version: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DatabaseVersion {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DatabaseVersion").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DatabaseVersion {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DatabaseVersion {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:signal.Header)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Header {
    // message fields
    // @@protoc_insertion_point(field:signal.Header.iv)
    pub iv: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:signal.Header.salt)
    pub salt: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:signal.Header.version)
    pub version: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:signal.Header.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Header {
    fn default() -> &'a Header {
        <Header as ::protobuf::Message>::default_instance()
    }
}

impl Header {
    pub fn new() -> Header {
        ::std::default::Default::default()
    }

    // optional bytes iv = 1;

    pub fn iv(&self) -> &[u8] {
        match self.iv.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_iv(&mut self) {
        self.iv = ::std::option::Option::None;
    }

    pub fn has_iv(&self) -> bool {
        self.iv.is_some()
    }

    // Param is passed by value, moved
    pub fn set_iv(&mut self, v: ::std::vec::Vec<u8>) {
        self.iv = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_iv(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.iv.is_none() {
            self.iv = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.iv.as_mut().unwrap()
    }

    // Take field
    pub fn take_iv(&mut self) -> ::std::vec::Vec<u8> {
        self.iv.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes salt = 2;

    pub fn salt(&self) -> &[u8] {
        match self.salt.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_salt(&mut self) {
        self.salt = ::std::option::Option::None;
    }

    pub fn has_salt(&self) -> bool {
        self.salt.is_some()
    }

    // Param is passed by value, moved
    pub fn set_salt(&mut self, v: ::std::vec::Vec<u8>) {
        self.salt = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_salt(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.salt.is_none() {
            self.salt = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.salt.as_mut().unwrap()
    }

    // Take field
    pub fn take_salt(&mut self) -> ::std::vec::Vec<u8> {
        self.salt.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional uint32 version = 3;

    pub fn version(&self) -> u32 {
        self.version.unwrap_or(0)
    }

    pub fn clear_version(&mut self) {
        self.version = ::std::option::Option::None;
    }

    pub fn has_version(&self) -> bool {
        self.version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: u32) {
        self.version = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "iv",
            |m: &Header| { &m.iv },
            |m: &mut Header| { &mut m.iv },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "salt",
            |m: &Header| { &m.salt },
            |m: &mut Header| { &mut m.salt },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "version",
            |m: &Header| { &m.version },
            |m: &mut Header| { &mut m.version },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Header>(
            "Header",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Header {
    const NAME: &'static str = "Header";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.iv = ::std::option::Option::Some(is.read_bytes()?);
                },
                18 => {
                    self.salt = ::std::option::Option::Some(is.read_bytes()?);
                },
                24 => {
                    self.version = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.iv.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        if let Some(v) = self.salt.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        if let Some(v) = self.version {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.iv.as_ref() {
            os.write_bytes(1, v)?;
        }
        if let Some(v) = self.salt.as_ref() {
            os.write_bytes(2, v)?;
        }
        if let Some(v) = self.version {
            os.write_uint32(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Header {
        Header::new()
    }

    fn clear(&mut self) {
        self.iv = ::std::option::Option::None;
        self.salt = ::std::option::Option::None;
        self.version = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Header {
        static instance: Header = Header {
            iv: ::std::option::Option::None,
            salt: ::std::option::Option::None,
            version: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Header {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Header").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Header {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Header {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:signal.KeyValue)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct KeyValue {
    // message fields
    // @@protoc_insertion_point(field:signal.KeyValue.key)
    pub key: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:signal.KeyValue.blobValue)
    pub blobValue: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:signal.KeyValue.booleanValue)
    pub booleanValue: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:signal.KeyValue.floatValue)
    pub floatValue: ::std::option::Option<f32>,
    // @@protoc_insertion_point(field:signal.KeyValue.integerValue)
    pub integerValue: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:signal.KeyValue.longValue)
    pub longValue: ::std::option::Option<i64>,
    // @@protoc_insertion_point(field:signal.KeyValue.stringValue)
    pub stringValue: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:signal.KeyValue.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a KeyValue {
    fn default() -> &'a KeyValue {
        <KeyValue as ::protobuf::Message>::default_instance()
    }
}

impl KeyValue {
    pub fn new() -> KeyValue {
        ::std::default::Default::default()
    }

    // optional string key = 1;

    pub fn key(&self) -> &str {
        match self.key.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_key(&mut self) {
        self.key = ::std::option::Option::None;
    }

    pub fn has_key(&self) -> bool {
        self.key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::string::String) {
        self.key = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ::std::string::String {
        if self.key.is_none() {
            self.key = ::std::option::Option::Some(::std::string::String::new());
        }
        self.key.as_mut().unwrap()
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::string::String {
        self.key.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bytes blobValue = 2;

    pub fn blobValue(&self) -> &[u8] {
        match self.blobValue.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_blobValue(&mut self) {
        self.blobValue = ::std::option::Option::None;
    }

    pub fn has_blobValue(&self) -> bool {
        self.blobValue.is_some()
    }

    // Param is passed by value, moved
    pub fn set_blobValue(&mut self, v: ::std::vec::Vec<u8>) {
        self.blobValue = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_blobValue(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.blobValue.is_none() {
            self.blobValue = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.blobValue.as_mut().unwrap()
    }

    // Take field
    pub fn take_blobValue(&mut self) -> ::std::vec::Vec<u8> {
        self.blobValue.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bool booleanValue = 3;

    pub fn booleanValue(&self) -> bool {
        self.booleanValue.unwrap_or(false)
    }

    pub fn clear_booleanValue(&mut self) {
        self.booleanValue = ::std::option::Option::None;
    }

    pub fn has_booleanValue(&self) -> bool {
        self.booleanValue.is_some()
    }

    // Param is passed by value, moved
    pub fn set_booleanValue(&mut self, v: bool) {
        self.booleanValue = ::std::option::Option::Some(v);
    }

    // optional float floatValue = 4;

    pub fn floatValue(&self) -> f32 {
        self.floatValue.unwrap_or(0.)
    }

    pub fn clear_floatValue(&mut self) {
        self.floatValue = ::std::option::Option::None;
    }

    pub fn has_floatValue(&self) -> bool {
        self.floatValue.is_some()
    }

    // Param is passed by value, moved
    pub fn set_floatValue(&mut self, v: f32) {
        self.floatValue = ::std::option::Option::Some(v);
    }

    // optional int32 integerValue = 5;

    pub fn integerValue(&self) -> i32 {
        self.integerValue.unwrap_or(0)
    }

    pub fn clear_integerValue(&mut self) {
        self.integerValue = ::std::option::Option::None;
    }

    pub fn has_integerValue(&self) -> bool {
        self.integerValue.is_some()
    }

    // Param is passed by value, moved
    pub fn set_integerValue(&mut self, v: i32) {
        self.integerValue = ::std::option::Option::Some(v);
    }

    // optional int64 longValue = 6;

    pub fn longValue(&self) -> i64 {
        self.longValue.unwrap_or(0)
    }

    pub fn clear_longValue(&mut self) {
        self.longValue = ::std::option::Option::None;
    }

    pub fn has_longValue(&self) -> bool {
        self.longValue.is_some()
    }

    // Param is passed by value, moved
    pub fn set_longValue(&mut self, v: i64) {
        self.longValue = ::std::option::Option::Some(v);
    }

    // optional string stringValue = 7;

    pub fn stringValue(&self) -> &str {
        match self.stringValue.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_stringValue(&mut self) {
        self.stringValue = ::std::option::Option::None;
    }

    pub fn has_stringValue(&self) -> bool {
        self.stringValue.is_some()
    }

    // Param is passed by value, moved
    pub fn set_stringValue(&mut self, v: ::std::string::String) {
        self.stringValue = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_stringValue(&mut self) -> &mut ::std::string::String {
        if self.stringValue.is_none() {
            self.stringValue = ::std::option::Option::Some(::std::string::String::new());
        }
        self.stringValue.as_mut().unwrap()
    }

    // Take field
    pub fn take_stringValue(&mut self) -> ::std::string::String {
        self.stringValue.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "key",
            |m: &KeyValue| { &m.key },
            |m: &mut KeyValue| { &mut m.key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "blobValue",
            |m: &KeyValue| { &m.blobValue },
            |m: &mut KeyValue| { &mut m.blobValue },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "booleanValue",
            |m: &KeyValue| { &m.booleanValue },
            |m: &mut KeyValue| { &mut m.booleanValue },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "floatValue",
            |m: &KeyValue| { &m.floatValue },
            |m: &mut KeyValue| { &mut m.floatValue },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "integerValue",
            |m: &KeyValue| { &m.integerValue },
            |m: &mut KeyValue| { &mut m.integerValue },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "longValue",
            |m: &KeyValue| { &m.longValue },
            |m: &mut KeyValue| { &mut m.longValue },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "stringValue",
            |m: &KeyValue| { &m.stringValue },
            |m: &mut KeyValue| { &mut m.stringValue },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<KeyValue>(
            "KeyValue",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for KeyValue {
    const NAME: &'static str = "KeyValue";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.key = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.blobValue = ::std::option::Option::Some(is.read_bytes()?);
                },
                24 => {
                    self.booleanValue = ::std::option::Option::Some(is.read_bool()?);
                },
                37 => {
                    self.floatValue = ::std::option::Option::Some(is.read_float()?);
                },
                40 => {
                    self.integerValue = ::std::option::Option::Some(is.read_int32()?);
                },
                48 => {
                    self.longValue = ::std::option::Option::Some(is.read_int64()?);
                },
                58 => {
                    self.stringValue = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.key.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.blobValue.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        if let Some(v) = self.booleanValue {
            my_size += 1 + 1;
        }
        if let Some(v) = self.floatValue {
            my_size += 1 + 4;
        }
        if let Some(v) = self.integerValue {
            my_size += ::protobuf::rt::int32_size(5, v);
        }
        if let Some(v) = self.longValue {
            my_size += ::protobuf::rt::int64_size(6, v);
        }
        if let Some(v) = self.stringValue.as_ref() {
            my_size += ::protobuf::rt::string_size(7, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.key.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.blobValue.as_ref() {
            os.write_bytes(2, v)?;
        }
        if let Some(v) = self.booleanValue {
            os.write_bool(3, v)?;
        }
        if let Some(v) = self.floatValue {
            os.write_float(4, v)?;
        }
        if let Some(v) = self.integerValue {
            os.write_int32(5, v)?;
        }
        if let Some(v) = self.longValue {
            os.write_int64(6, v)?;
        }
        if let Some(v) = self.stringValue.as_ref() {
            os.write_string(7, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> KeyValue {
        KeyValue::new()
    }

    fn clear(&mut self) {
        self.key = ::std::option::Option::None;
        self.blobValue = ::std::option::Option::None;
        self.booleanValue = ::std::option::Option::None;
        self.floatValue = ::std::option::Option::None;
        self.integerValue = ::std::option::Option::None;
        self.longValue = ::std::option::Option::None;
        self.stringValue = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static KeyValue {
        static instance: KeyValue = KeyValue {
            key: ::std::option::Option::None,
            blobValue: ::std::option::Option::None,
            booleanValue: ::std::option::Option::None,
            floatValue: ::std::option::Option::None,
            integerValue: ::std::option::Option::None,
            longValue: ::std::option::Option::None,
            stringValue: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for KeyValue {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("KeyValue").unwrap()).clone()
    }
}

impl ::std::fmt::Display for KeyValue {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for KeyValue {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:signal.BackupFrame)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct BackupFrame {
    // message fields
    // @@protoc_insertion_point(field:signal.BackupFrame.header)
    pub header: ::protobuf::MessageField<Header>,
    // @@protoc_insertion_point(field:signal.BackupFrame.statement)
    pub statement: ::protobuf::MessageField<SqlStatement>,
    // @@protoc_insertion_point(field:signal.BackupFrame.preference)
    pub preference: ::protobuf::MessageField<SharedPreference>,
    // @@protoc_insertion_point(field:signal.BackupFrame.attachment)
    pub attachment: ::protobuf::MessageField<Attachment>,
    // @@protoc_insertion_point(field:signal.BackupFrame.version)
    pub version: ::protobuf::MessageField<DatabaseVersion>,
    // @@protoc_insertion_point(field:signal.BackupFrame.end)
    pub end: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:signal.BackupFrame.avatar)
    pub avatar: ::protobuf::MessageField<Avatar>,
    // @@protoc_insertion_point(field:signal.BackupFrame.sticker)
    pub sticker: ::protobuf::MessageField<Sticker>,
    // @@protoc_insertion_point(field:signal.BackupFrame.keyValue)
    pub keyValue: ::protobuf::MessageField<KeyValue>,
    // special fields
    // @@protoc_insertion_point(special_field:signal.BackupFrame.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BackupFrame {
    fn default() -> &'a BackupFrame {
        <BackupFrame as ::protobuf::Message>::default_instance()
    }
}

impl BackupFrame {
    pub fn new() -> BackupFrame {
        ::std::default::Default::default()
    }

    // optional bool end = 6;

    pub fn end(&self) -> bool {
        self.end.unwrap_or(false)
    }

    pub fn clear_end(&mut self) {
        self.end = ::std::option::Option::None;
    }

    pub fn has_end(&self) -> bool {
        self.end.is_some()
    }

    // Param is passed by value, moved
    pub fn set_end(&mut self, v: bool) {
        self.end = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(9);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Header>(
            "header",
            |m: &BackupFrame| { &m.header },
            |m: &mut BackupFrame| { &mut m.header },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, SqlStatement>(
            "statement",
            |m: &BackupFrame| { &m.statement },
            |m: &mut BackupFrame| { &mut m.statement },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, SharedPreference>(
            "preference",
            |m: &BackupFrame| { &m.preference },
            |m: &mut BackupFrame| { &mut m.preference },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Attachment>(
            "attachment",
            |m: &BackupFrame| { &m.attachment },
            |m: &mut BackupFrame| { &mut m.attachment },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, DatabaseVersion>(
            "version",
            |m: &BackupFrame| { &m.version },
            |m: &mut BackupFrame| { &mut m.version },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "end",
            |m: &BackupFrame| { &m.end },
            |m: &mut BackupFrame| { &mut m.end },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Avatar>(
            "avatar",
            |m: &BackupFrame| { &m.avatar },
            |m: &mut BackupFrame| { &mut m.avatar },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Sticker>(
            "sticker",
            |m: &BackupFrame| { &m.sticker },
            |m: &mut BackupFrame| { &mut m.sticker },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, KeyValue>(
            "keyValue",
            |m: &BackupFrame| { &m.keyValue },
            |m: &mut BackupFrame| { &mut m.keyValue },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BackupFrame>(
            "BackupFrame",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for BackupFrame {
    const NAME: &'static str = "BackupFrame";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.header)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.statement)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.preference)?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.attachment)?;
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.version)?;
                },
                48 => {
                    self.end = ::std::option::Option::Some(is.read_bool()?);
                },
                58 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.avatar)?;
                },
                66 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.sticker)?;
                },
                74 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.keyValue)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.statement.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.preference.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.attachment.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.version.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.end {
            my_size += 1 + 1;
        }
        if let Some(v) = self.avatar.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.sticker.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.keyValue.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.header.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.statement.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.preference.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.attachment.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if let Some(v) = self.version.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        if let Some(v) = self.end {
            os.write_bool(6, v)?;
        }
        if let Some(v) = self.avatar.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        }
        if let Some(v) = self.sticker.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        }
        if let Some(v) = self.keyValue.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> BackupFrame {
        BackupFrame::new()
    }

    fn clear(&mut self) {
        self.header.clear();
        self.statement.clear();
        self.preference.clear();
        self.attachment.clear();
        self.version.clear();
        self.end = ::std::option::Option::None;
        self.avatar.clear();
        self.sticker.clear();
        self.keyValue.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BackupFrame {
        static instance: BackupFrame = BackupFrame {
            header: ::protobuf::MessageField::none(),
            statement: ::protobuf::MessageField::none(),
            preference: ::protobuf::MessageField::none(),
            attachment: ::protobuf::MessageField::none(),
            version: ::protobuf::MessageField::none(),
            end: ::std::option::Option::None,
            avatar: ::protobuf::MessageField::none(),
            sticker: ::protobuf::MessageField::none(),
            keyValue: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for BackupFrame {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BackupFrame").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BackupFrame {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BackupFrame {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rBackups.proto\x12\x06signal\"\xca\x02\n\x0cSqlStatement\x12\x1c\n\ts\
    tatement\x18\x01\x20\x01(\tR\tstatement\x12A\n\nparameters\x18\x02\x20\
    \x03(\x0b2!.signal.SqlStatement.SqlParameterR\nparameters\x1a\xd8\x01\n\
    \x0cSqlParameter\x12&\n\x0estringParamter\x18\x01\x20\x01(\tR\x0estringP\
    aramter\x12*\n\x10integerParameter\x18\x02\x20\x01(\x04R\x10integerParam\
    eter\x12(\n\x0fdoubleParameter\x18\x03\x20\x01(\x01R\x0fdoubleParameter\
    \x12$\n\rblobParameter\x18\x04\x20\x01(\x0cR\rblobParameter\x12$\n\rnull\
    parameter\x18\x05\x20\x01(\x08R\rnullparameter\"\xc6\x01\n\x10SharedPref\
    erence\x12\x12\n\x04file\x18\x01\x20\x01(\tR\x04file\x12\x10\n\x03key\
    \x18\x02\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\x03\x20\x01(\tR\x05va\
    lue\x12\"\n\x0cbooleanValue\x18\x04\x20\x01(\x08R\x0cbooleanValue\x12&\n\
    \x0estringSetValue\x18\x05\x20\x03(\tR\x0estringSetValue\x12*\n\x10isStr\
    ingSetValue\x18\x06\x20\x01(\x08R\x10isStringSetValue\"^\n\nAttachment\
    \x12\x14\n\x05rowId\x18\x01\x20\x01(\x04R\x05rowId\x12\"\n\x0cattachment\
    Id\x18\x02\x20\x01(\x04R\x0cattachmentId\x12\x16\n\x06length\x18\x03\x20\
    \x01(\rR\x06length\"7\n\x07Sticker\x12\x14\n\x05rowId\x18\x01\x20\x01(\
    \x04R\x05rowId\x12\x16\n\x06length\x18\x02\x20\x01(\rR\x06length\"V\n\
    \x06Avatar\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12\x20\n\x0bre\
    cipientId\x18\x03\x20\x01(\tR\x0brecipientId\x12\x16\n\x06length\x18\x02\
    \x20\x01(\rR\x06length\"+\n\x0fDatabaseVersion\x12\x18\n\x07version\x18\
    \x01\x20\x01(\rR\x07version\"F\n\x06Header\x12\x0e\n\x02iv\x18\x01\x20\
    \x01(\x0cR\x02iv\x12\x12\n\x04salt\x18\x02\x20\x01(\x0cR\x04salt\x12\x18\
    \n\x07version\x18\x03\x20\x01(\rR\x07version\"\xe2\x01\n\x08KeyValue\x12\
    \x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x1c\n\tblobValue\x18\x02\
    \x20\x01(\x0cR\tblobValue\x12\"\n\x0cbooleanValue\x18\x03\x20\x01(\x08R\
    \x0cbooleanValue\x12\x1e\n\nfloatValue\x18\x04\x20\x01(\x02R\nfloatValue\
    \x12\"\n\x0cintegerValue\x18\x05\x20\x01(\x05R\x0cintegerValue\x12\x1c\n\
    \tlongValue\x18\x06\x20\x01(\x03R\tlongValue\x12\x20\n\x0bstringValue\
    \x18\x07\x20\x01(\tR\x0bstringValue\"\x9d\x03\n\x0bBackupFrame\x12&\n\
    \x06header\x18\x01\x20\x01(\x0b2\x0e.signal.HeaderR\x06header\x122\n\tst\
    atement\x18\x02\x20\x01(\x0b2\x14.signal.SqlStatementR\tstatement\x128\n\
    \npreference\x18\x03\x20\x01(\x0b2\x18.signal.SharedPreferenceR\nprefere\
    nce\x122\n\nattachment\x18\x04\x20\x01(\x0b2\x12.signal.AttachmentR\natt\
    achment\x121\n\x07version\x18\x05\x20\x01(\x0b2\x17.signal.DatabaseVersi\
    onR\x07version\x12\x10\n\x03end\x18\x06\x20\x01(\x08R\x03end\x12&\n\x06a\
    vatar\x18\x07\x20\x01(\x0b2\x0e.signal.AvatarR\x06avatar\x12)\n\x07stick\
    er\x18\x08\x20\x01(\x0b2\x0f.signal.StickerR\x07sticker\x12,\n\x08keyVal\
    ue\x18\t\x20\x01(\x0b2\x10.signal.KeyValueR\x08keyValueB)\n'org.thoughtc\
    rime.securesms.backup.proto\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(10);
            messages.push(SqlStatement::generated_message_descriptor_data());
            messages.push(SharedPreference::generated_message_descriptor_data());
            messages.push(Attachment::generated_message_descriptor_data());
            messages.push(Sticker::generated_message_descriptor_data());
            messages.push(Avatar::generated_message_descriptor_data());
            messages.push(DatabaseVersion::generated_message_descriptor_data());
            messages.push(Header::generated_message_descriptor_data());
            messages.push(KeyValue::generated_message_descriptor_data());
            messages.push(BackupFrame::generated_message_descriptor_data());
            messages.push(sql_statement::SqlParameter::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
